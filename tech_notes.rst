TODO
====

* A module to assign genres to texts.

* When BTW has been used to produce articles for a bit, evaluate how to detect near-synonyms. See "Semantic fields for BTW2013_ldd_Reply".

* Support for Paul Hackett's AIBS API. See email from Jack circa
2013-06-09.

* Determine how to use X-Zotero-Write-Token. What constitutes a *same* transaction?

User Stories
============

US1 As an author, when I want to insert a reference to a secondary
source, I want to be :

* US1.1 able to select a secondary source I've already referred to in
  my article, either by the abbreviation I've assgined to it or by
  bibliographical data.

* US1.2 able to search among the secondary sources that BTW already
  uses for other articles.

* US1.3 able to search in my own personal bibliographical database.

* US1.4 able to assign an abbreviation to a secondary source I've
  selected.

US2 As an author, when I want to insert a reference to a primary
source, I want to be:

* US2.1 able to select a primary source I've already referred to in my
  article, either by the abbrevitation I've assigned to it or by
  bibliographical data.

* US2.2 able to search among the primary sources that BTW already uses
  for other articles.

* US2.3 able to search in my own personal bibliographical database.

* US2.4 able to assign an abbreviation to a primary source I've
  selected.

US3 As an author, I want to be unable to assign the same abbreviation
to two different entities.

US4 As an author, I want to be able to undefine an abbreviation I've
created by mistake.

US5 As an author, I want to be able to rename an abbreviation I've
created by mistake.

US6 As an author, I want to be able to assign a string expansion to an
abbreviation.

US7 As an author, I want to be unable to assign the *same* string
expansion to two *different* abbreviations.

US8 As an author, I want to be unable to create duplicate entries with
the same headword.

US9 As an author, when editing I want to:

* US9.1 be able to mark words as Sanskrit, Tibetan, etc.

* US9.2 be able to unmark works as Sanskrit, Tibetan, etc.

* US9.3 have the editor automatically mark words I've already marked elsewhere in the text.

* US9.4 have the editor flag words that should probably be marked.

* US9.5 have the editor automatically create links to terms for which we have articles.

US10 As an author, when editing I want to:

* US10.1 be able to undo operations.

* US10.2 be able to redo operations.

* US10.3 have undo and redo steps make sense from my perspective. For instance, if I search and replace the word "potato" with "tomato", there are 10 instances, and I replaced these instances in one click, I should be able to undo this with one undo, not 10.

* US10.4 be able to revert my edits to a previous version of the article.

* US10.5 be able to go back and forth among versions of the article.

* US10.6 be able to know who is responsible for comitting a version of an article.

* US10.7 be able to see differences between versions of an article.

* US10.8 be able to know who is responsible for what changes in an article.

US11. As an author I want to be unable to accidentally delete uneditable text.

US12. As an author, I want to be unable to accidentally move text generated by the editing environment but that should remain anchored. (For instance, if a structure has an automatically generated label at the beginning of it, I should not be able to move that label.)

U13. As an author, I want to see opening and closing labels for elements that are not clearly represented through styling.

U14. As an author, I want to:

U14.1 to unwrap an element (delete the start and end tag, while preserving the contents).

U14.2 delete an element (delete start, end tags and contents).

U14.3 wrap a selection into an element.

As a visitor, I want to be able to search through article headwords.

As a visitor, I want to be able to search through article text. (Full-text search.)

As a visitor, I want to be able to click on a search result and see the article.

As a visitor, I want to be able to have the referent of an abbreviation be displayed.

As a visitor, I want to be able to follow hyperlinks to other resources or articles.


Environment and Settings
========================

Structure of the settings tree in BTW:

settings/__init__.py  BTW-wide settings
settings/_env.py      environment management
settings/<app>.py     settings specific to the application named <app>

The __init__.py file inspects INSTALLED_APPS searching for local
applications and **exec**s all the corresponding <app>.py files it
finds. Note that because these files are execed in __init__.py's
context, they can read and set variable that __init__.py sets.

To allow for changing configurations easily BTW gets an environment
name from the following sources:

* the BTW_ENV environment variable

* ~/.config/btw/env

* /etc/btw/env

This environment value can is then used by _env.find_config(name) to
find configuration files:

* ~/.config/btw/<name>.<env>.py

* /etc/btw/<name>.<env>.py

The **first** file found among the ones in the previous list is the
one used. By convention _env.find_config should be used by the files
under the settings directory to find overrides to their default
values. The <name> parameter should be "btw" for global settings or
the name of an application for application-specific settings. Again by
convention the caller to find_config should exec the value returned by
find_config **after** having done its local processing.

The order of execution of the various files is:

settings/__init__.py
<conf>/btw.<env>.py
settings/<app1>.py
<conf>/<app1>.<env>.py
settings/<app2>.py
<conf>/<app2>.<env>.py

where <env> is the value of the environment set as described earlier,
and <conf> is whatever path happens to contain the configuration file.

Roles
=====

+-----------+-------------------+--------------------------+
|BTW Role   |Django group(s)    |Notes                     |
+-----------+-------------------+--------------------------+
|visitor    |-                  |                          |
+-----------+-------------------+--------------------------+
|user       |-                  |This is an abstract       |
|           |                   |role. So no group.        |
+-----------+-------------------+--------------------------+
|author     |author             |                          |
+-----------+-------------------+--------------------------+
|editor     |editor             |                          |
+-----------+-------------------+--------------------------+
|superuser  |                   |Django superuser flag on. |
+-----------+-------------------+--------------------------+

**FUTURE** Initial versions of BTW will only allow the superuser(s) to
create new users. Later version should have an interface to streamline
this.

Dump of current permissions:

> select g.name, p.name, t.app_label, p.codename from auth_group g, auth_group_permissions r, auth_permission p, django_content_type t where r.group_id = g.id and r.permission_id = p.id and p.content_type_id = t.id;

author|Can add entry|lexicography|add_entry
author|Can change entry|lexicography|change_entry
editor|Can add entry|lexicography|add_entry
editor|Can change entry|lexicography|change_entry
editor|Can delete entry|lexicography|delete_entry

Zotero
======

Zotero's current search facilities are extremely primitive:

* The q parameter has no functionality for AND and OR operators. If the parameter is repeated, the query passed to the backend will just be mangled.

Zotero's use by BTW
-------------------

We will create at zotero.org an account for BTW in which we will
create a BTW group that will contain all the entries that BTW wants to
use.

A BTW contributor will have to:

1. Have a Zotero library accessible on Zotero.org.

2. Create a key for BTW to access that library.

3. Record in BTW their Zotero.org user ID and the key they want BTW to use.

Then they will log into BTW and:

1. Search their Zotero library for their entry.

2. Tell BTW to use this entry.

At this point BTW will copy the entry from the user's library to BTW's own library and assign a unique identifier to the entry (with user prompt; perhaps semi-automated; or put into a queue for an editor to vouch for the identifier).


Version Control
===============

Must keep in sync:

* Article contents.

* Items the article points to:

 * Abbreviations.

 * Bibliographical records.

 * Textual sources.


Database
========

auth_user
---------

abbreviations
-------------
